## cPEPmatch

Created by Brianda L. Santini  
Supervised by Prof. Dr. Martin Zacharias
Physics Department T38, Technical University of Munich, Garching, Germany.

## General Description:
Python program designed to find cyclic peptides that mimic proteins and target their binding partners. The program consists of four steps:

1: Cyclic Peptide Database Creation
The program reads from a pre-constructed database of 400 PDB structures downloaded from the PDBdatabank. It characterizes the motifs by calculating the CA carbon distances along the whole structure. Users can select the motif_size (4-7), consecutive (consecutive or not consecutive), and whether to select specific features such as cyclization type (e.g., 'head to tail') or whether they contain non-standard amino acids or not.

2: Characterization of the Protein-Protein or Protein-Ligand Interface
The motif is characterized using the same CA distance matrix as the cyclic peptide database, with the same given parameters (motif_size, motif_type). Users can select the interface_cutoff which defines the distance in angstroms to select the contact interface residues that will be matched. An optional parameter is protein_specific_residues, which takes a given selection of residue numbers to match, for example, if hot-spot analysis has been done prior to the matching.

3: Backbone Match Motif
This section matches the CA distance motifs of the protein interface and the cyclic peptide database. It selects matches that fit within the frmsd_threshold given, and returns a Distance RMSD value in angstroms.

4: Superimpose and Mutate
All matches are read and superimposed to match the structure of the protein mimic. A new Fit RMSD value in angstroms is returned that determines how well the structures' overall backbones fit. Matching side-chains, except for disulphide bonded cysteines, are mutated into the matching residues of the protein to mimic. Modeller is used for side-chain mutation and optimization. A main limitation of this step is that modeller is unable to process non-standard residues, so all non-standard cyclic peptides are excluded from the mutation step. A match_list.txt file is outputted, along with all the mutated (match#_pdbname.pdb) or aligned (match#_pdbname-not_mutated.pdb) structures.

Step 5: Results AnalysisThe output table contains match number, pdb name of the matched cyclic peptide, Dist-RMSD, matched cyclic peptide residues, matched protein residues, Fit-RMSD, and output file name (distinguishing mutated from not mutated structures). For Notebook version: Structure visuali
zation of the matches can be done by changing the match_to_view value to that of the one to visualize.

## Usage

The program requires the following parameters:

pdb_name (pdb file name, should contain both the protein and the target)
protein (protein chain name)
target (target chain name)
motif_size (number of CA carbons to match)
consecutive (motif type: consecutive or non-consecutive motifs)
interface_cutoff (distance in angstroms to define the contact interface residues that will be matched)
frmsd_threshold (Fit-RMSD value in angstroms of how precise you want the matching)
working_location (path to where your protein-target pdb file is located. Results will be outputted here)
database_location (path to where the cPEPmatch database is located)

Optional parameters:

protein_specific_residues (selection of given residue numbers to match, for example, if hot-spot analysis has been done prior to the matching. When a value is given, the interface_cutoff parameter is ignored)
cyclization_type (select only cyclic peptides from the database that are cyclized in a specific type, e.g., 'head to tail')
exclude_non_standard (exclude cyclic peptides from the database containing non-standard amino acids. The default value is False)

## Directory Structure
├── cPEPmatch.py
├── cpep_modules
│   ├── backbone_match.py
│   ├── cpep_database.py
│   ├── protein_target_characterization.py
│   └── superimpose_mutate.py
│   └── __init__.py
├── database
│   └── cyclo_pep.csv
│   └── *.pdb
├── lib
│   ├── old_databases
│   ├── test_system
│   └── update_database
├── README
└── requirements.txt

## Installation and Setup

Prerequisites
- Anaconda (recommended over Miniconda for compatibility reasons)

Creating a Conda Environment
Create a dedicated Conda environment for cPEPmatch:
```bash
conda create -n "cpepmatch" python=3.7.11

conda activate cpepmatch
``` 
Install Required Python Packages
Install the necessary Python packages using the requirements.txt file:
```bash
  pip install -r requirements.txt
``` 
Install Additional Conda Modules
Some modules need to be installed specifically via Conda:
 ```bash
 conda install -c conda-forge vmd.python

conda config --add channels salilab

conda install modeller
```
However, it will instruct you to modify /home/user/miniconda3/envs/server/lib/modeller-10.3/modlib/modeller/config.py and replace XXXX with your Modeller licence key (in this case: MODELIRANJE). Execute the command again. </br>
If the installation of vmd-python doesn't work, go to https://github.com/Eigenstate/vmd-python, download the repo, and run it.

VMD-Python Installation Issues
If you encounter issues installing vmd-python, visit vmd-python GitHub for alternative installation methods.

## Making the Script Executable and Setting Up PATH

1. Update the Shebang Line
Make sure the cpepmatch environment is activated
Find the Path to the Python Interpreter:
Use the which command to find out the path to the Python interpreter in the activated environment:
```bash
which python
```
This command will output the path to the Python interpreter, something like:
/home/user/anaconda3/envs/cpepmatch/bin/python

Edit the cPEPmatch.py file to include the shebang line with the path to the Anaconda Python interpreter at the very top:
```bash
#!/home/user/anaconda3/envs/cpepmatch/bin/python
```
Replace the path with the one you obtained from the which python command.


2. Make cPEPmatch Executable
Navigate to the cPEPmatch directory and make the main script executable:
```bash
chmod +x cPEPmatch.py
```

3. Add cPEPmatch to PATH
For convenience, add cPEPmatch to your system's PATH:
```bash
echo 'export PATH="$PATH:/path/to/cPEPmatch"' >> ~/.bashrc
source ~/.bashrc
```

## Usage
After installation, you can run cPEPmatch from any directory in your terminal:
```bash
cPEPmatch.py [arguments]
```
Replace [arguments] with appropriate command-line arguments for the script.

To learn about the various command-line arguments and options that cPEPmatch supports, you can use the help option:
```bash
cPEPmatch.py -h
```